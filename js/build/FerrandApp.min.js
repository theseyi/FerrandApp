/*! FerrandApp 2013-12-29 */
var ferrandApp = function () {
    var a = 0, b = [], c = $("#kvInput"), d = $("#kvCombo");
    return{getInput  : function () {
        return c.val()
    }, setInput      : function (a) {
        arguments.length > 1 && "string" == typeof arguments[0] ? c.val(a) : c.val("")
    }, getSelected   : function () {
        var a = [];
        return $(d).children().filter(":selected").each(function () {
            a.push(parseInt(this.value, 10))
        }), a
    }, addKeyValue   : function (c) {
        var d;
        if (this.isValidInput(c)) {
            var e, f;
            d = c.split("=", 2), e = d[0].trim(), f = d[1].trim(), this.processInput({key: e, value: f}), f = this.utils.isNumeric(f) ? parseInt(f, 10) : f, b.push({id: ++a, name: e, value: f}), this.render(null)
        }
    }, processInput  : function (a) {
        var b = 0, c = [], d = /^(?:[0-9A-Za-z]+)$/;
        if (!(a instanceof Object))throw{name: "", message: "Should be an instance of Object"};
        for (var e in a)a.hasOwnProperty(e) && (c[b] = a[e], ++b);
        if (!d.test(c[0]) || !d.test(c[1]))throw{name: "Oops! We only allow alphabets and numbers... sorry", message: "Your Name / Value pair can only contain alpha-numeric characters.However, if you like, you may enter only numbers in your value."};
        if (this.utils.isNumeric(c[0]))throw{name: "Ahh. That's a bad name", message: 'The "name" in your pair appears to be a numeric value (' + c[0] + "), only alphanumeric characters are allowed in the name property"}
    }, removeKeyValue: function (a) {
        $.each(a, function (a, c) {
            $.each(b, function (a) {
                return b[a].id === c ? (b.splice(a, 1), !1) : !0
            })
        }), this.render(null)
    }, isValidInput  : function (a) {
        var b = 0;
        if (!("string" == typeof a && a.length > 2))throw{name: "Hmm... your input does not look right", message: 'Your string should be in the proper format of "name" = "value". Without the quotes.'};
        return this.utils.forEach(a, function (a) {
            "=" === a && b++
        }), 1 === b && a.indexOf("=") > 0 && a.indexOf("=") < a.length - 1
    }, sortKeyValueBy: function (a) {
        b.sort(this.utils.createComparator(a)), this.render(null)
    }, render        : function (a) {
        var c = a || d;
        c.children().remove(), function (a, b) {
            var c = [];
            $.each(a, function (a, b) {
                c.push("<option value =" + b.id + ">" + b.name + "=" + b.value + "</option>")
            }), b.append($(c.join("")))
        }(b, c)
    }, buildXML      : function (a) {
        var c = a || b, d = [];
        if (!this.utils.isArray(c))throw{name: "Data Error", message: "It seems you do not have the right kind of data: " + c};
        return d.push("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>[br]"), d.push("<root>[br]"), $.each(c, function (a, b) {
            d.push(" <dataitem>[br]");
            for (var c in b)b.hasOwnProperty(c) && d.push("  <" + c + ">" + b[c] + "</" + c + ">[br]");
            d.push(" </dataitem>[br]")
        }), d.push("</root>[br]"), d
    }, renderXML     : function (a, b) {
        if (b.empty(), this.utils.isArray(a) && a.length > 3) {
            a = a.join(""), a = a.replace(/[<>&"]/g, function (a) {
                var b = {"<": "&lt;", ">": "&gt;", '"': "&quot;", "&": "&amp;"};
                return b[a]
            }), a = a.replace(/\[br\]/g, "<br />");
            var c = "<pre>" + a + "</pre>";
            return $(c).appendTo(b), !0
        }
        return!1
    }, utils         : {forEach: function (a, b) {
        if ("string" == typeof a || this.isArray(a))for (var c = 0, d = a.length; d > c; c++)b(a[c])
    }, isArray                 : function (a) {
        return"[object Array]" === Object.prototype.toString.call(a)
    }, isNumeric               : function (a) {
        return!isNaN(parseFloat(a)) && isFinite(a)
    }, createComparator        : function (a) {
        return function (b, c) {
            var d = b[a], e = c[a];
            return d === e ? 0 : typeof d == typeof e ? "string" == typeof d ? d.localeCompare(e) : e > d ? -1 : 1 : typeof e > typeof d ? -1 : 1
        }
    }, handleError             : function (a, b) {
        b.show(), b.html("<span>" + a.name + "<br />" + a.message + "</span>"), setTimeout(function () {
            b.children().fadeOut(), b.slideUp("slow")
        }, 1e4)
    }}, start        : function () {
        var a = $("input#kvAdd"), b = $("input#kvDelete"), c = $("input.kvSort"), d = $("#kvShowXML"), e = $("#kvInput"), f = $(".kv-error-notification"), g = $("#kvXML");
        e.bind({keypress: function (b) {
            13 === b.keyCode && a.click()
        }}), 1 === a.length && a.click(function (a) {
            a.preventDefault();
            try {
                ferrandApp.addKeyValue(ferrandApp.getInput())
            } catch (a) {
                ferrandApp.utils.handleError(a, f)
            }
            ferrandApp.setInput("")
        }), 1 === b.length && b.click(function (a) {
            a.preventDefault();
            var b = ferrandApp.getSelected();
            b.length > 0 && ferrandApp.removeKeyValue(b)
        }), c.length > 0 && c.click(function (a) {
            switch (a.preventDefault(), !0) {
                case"sort by name" === this.value.toLocaleLowerCase():
                    ferrandApp.sortKeyValueBy("name");
                    break;
                case"sort by value" === this.value.toLocaleLowerCase():
                    ferrandApp.sortKeyValueBy("value");
                    break;
                default:
                    ferrandApp.sortKeyValueBy("id")
            }
        }), d.length > 0 && d.click(function (a) {
            a.preventDefault(), $(this).val(ferrandApp.renderXML(ferrandApp.buildXML(), g) ? "Reload XML" : "Show XML")
        })
    }}
}();
$(ferrandApp.start);
var ferrandApp = function () {
    var a = 0, b = [], c = $("#kvInput"), d = $("#kvCombo");
    return{getInput  : function () {
        return c.val()
    }, setInput      : function (a) {
        arguments.length > 1 && "string" == typeof arguments[0] ? c.val(a) : c.val("")
    }, getSelected   : function () {
        var a = [];
        return $(d).children().filter(":selected").each(function () {
            a.push(parseInt(this.value, 10))
        }), a
    }, addKeyValue   : function (c) {
        var d;
        if (this.isValidInput(c)) {
            var e, f;
            d = c.split("=", 2), e = d[0].trim(), f = d[1].trim(), this.processInput({key: e, value: f}), f = this.utils.isNumeric(f) ? parseInt(f, 10) : f, b.push({id: ++a, name: e, value: f}), this.render(null)
        }
    }, processInput  : function (a) {
        var b = 0, c = [], d = /^(?:[0-9A-Za-z]+)$/;
        if (!(a instanceof Object))throw{name: "", message: "Should be an instance of Object"};
        for (var e in a)a.hasOwnProperty(e) && (c[b] = a[e], ++b);
        if (!d.test(c[0]) || !d.test(c[1]))throw{name: "Oops! We only allow alphabets and numbers... sorry", message: "Your Name / Value pair can only contain alpha-numeric characters.However, if you like, you may enter only numbers in your value."};
        if (this.utils.isNumeric(c[0]))throw{name: "Ahh. That's a bad name", message: 'The "name" in your pair appears to be a numeric value (' + c[0] + "), only alphanumeric characters are allowed in the name property"}
    }, removeKeyValue: function (a) {
        $.each(a, function (a, c) {
            $.each(b, function (a) {
                return b[a].id === c ? (b.splice(a, 1), !1) : !0
            })
        }), this.render(null)
    }, isValidInput  : function (a) {
        var b = 0;
        if (!("string" == typeof a && a.length > 2))throw{name: "Hmm... your input does not look right", message: 'Your string should be in the proper format of "name" = "value". Without the quotes.'};
        return this.utils.forEach(a, function (a) {
            "=" === a && b++
        }), 1 === b && a.indexOf("=") > 0 && a.indexOf("=") < a.length - 1
    }, sortKeyValueBy: function (a) {
        b.sort(this.utils.createComparator(a)), this.render(null)
    }, render        : function (a) {
        var c = a || d;
        c.children().remove(), function (a, b) {
            var c = [];
            $.each(a, function (a, b) {
                c.push("<option value =" + b.id + ">" + b.name + "=" + b.value + "</option>")
            }), b.append($(c.join("")))
        }(b, c)
    }, buildXML      : function (a) {
        var c = a || b, d = [];
        if (!this.utils.isArray(c))throw{name: "Data Error", message: "It seems you do not have the right kind of data: " + c};
        return d.push("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>[br]"), d.push("<root>[br]"), $.each(c, function (a, b) {
            d.push(" <dataitem>[br]");
            for (var c in b)b.hasOwnProperty(c) && d.push("  <" + c + ">" + b[c] + "</" + c + ">[br]");
            d.push(" </dataitem>[br]")
        }), d.push("</root>[br]"), d
    }, renderXML     : function (a, b) {
        if (b.empty(), this.utils.isArray(a) && a.length > 3) {
            a = a.join(""), a = a.replace(/[<>&"]/g, function (a) {
                var b = {"<": "&lt;", ">": "&gt;", '"': "&quot;", "&": "&amp;"};
                return b[a]
            }), a = a.replace(/\[br\]/g, "<br />");
            var c = "<pre>" + a + "</pre>";
            return $(c).appendTo(b), !0
        }
        return!1
    }, utils         : {forEach: function (a, b) {
        if ("string" == typeof a || this.isArray(a))for (var c = 0, d = a.length; d > c; c++)b(a[c])
    }, isArray                 : function (a) {
        return"[object Array]" === Object.prototype.toString.call(a)
    }, isNumeric               : function (a) {
        return!isNaN(parseFloat(a)) && isFinite(a)
    }, createComparator        : function (a) {
        return function (b, c) {
            var d = b[a], e = c[a];
            return d === e ? 0 : typeof d == typeof e ? "string" == typeof d ? d.localeCompare(e) : e > d ? -1 : 1 : typeof e > typeof d ? -1 : 1
        }
    }, handleError             : function (a, b) {
        b.show(), b.html("<span>" + a.name + "<br />" + a.message + "</span>"), setTimeout(function () {
            b.children().fadeOut(), b.slideUp("slow")
        }, 1e4)
    }}, start        : function () {
        var a = $("input#kvAdd"), b = $("input#kvDelete"), c = $("input.kvSort"), d = $("#kvShowXML"), e = $("#kvInput"), f = $(".kv-error-notification"), g = $("#kvXML");
        e.bind({keypress: function (b) {
            13 === b.keyCode && a.click()
        }}), 1 === a.length && a.click(function (a) {
            a.preventDefault();
            try {
                ferrandApp.addKeyValue(ferrandApp.getInput())
            } catch (a) {
                ferrandApp.utils.handleError(a, f)
            }
            ferrandApp.setInput("")
        }), 1 === b.length && b.click(function (a) {
            a.preventDefault();
            var b = ferrandApp.getSelected();
            b.length > 0 && ferrandApp.removeKeyValue(b)
        }), c.length > 0 && c.click(function (a) {
            switch (a.preventDefault(), !0) {
                case"sort by name" === this.value.toLocaleLowerCase():
                    ferrandApp.sortKeyValueBy("name");
                    break;
                case"sort by value" === this.value.toLocaleLowerCase():
                    ferrandApp.sortKeyValueBy("value");
                    break;
                default:
                    ferrandApp.sortKeyValueBy("id")
            }
        }), d.length > 0 && d.click(function (a) {
            a.preventDefault(), $(this).val(ferrandApp.renderXML(ferrandApp.buildXML(), g) ? "Reload XML" : "Show XML")
        })
    }}
}();
$(ferrandApp.start);