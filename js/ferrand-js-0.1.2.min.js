var ferrandApp = function () {
    var _count = 0;
    var _data = [];
    var _input = $("#kvInput");
    var _output = $("#kvCombo");
    return{getInput  : function () {
        return _input.val()
    }, setInput      : function (str) {
        arguments.length > 1 && typeof arguments[0] === "string" ? _input.val(str) : _input.val("")
    }, getSelected   : function () {
        var selected = [];
        $(_output).children().filter(":selected").each(function () {
            selected.push(parseInt(this.value, 10))
        });
        return selected
    }, addKeyValue   : function (str) {
        var arr;
        if (this.isValidInput(str)) {
            var key, value;
            arr = str.split("=", 2);
            key = arr[0].trim();
            value = arr[1].trim();
            this.processInput({key: key, value: value});
            value = this.utils.isNumeric(value) ? parseInt(value, 10) : value;
            _data.push({id: ++_count, name: key, value: value});
            this.render(null)
        }
    }, processInput  : function (obj) {
        var size = 0;
        var arr = [];
        var regexpTest = /^(?:[0-9A-Za-z]+)$/;
        if (obj instanceof Object) {
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    arr[size] = obj[prop];
                    ++size
                }
            }
            if (!regexpTest.test(arr[0]) || !regexpTest.test(arr[1])) {
                throw{name: "Oops! We only allow alphabets and numbers... sorry", message: "Your Name / Value pair can only contain alpha-numeric characters." + "However, if you like, you may enter only numbers in your value."}
            }
            if (this.utils.isNumeric(arr[0])) {
                throw{name: "Ahh. That's a bad name", message: 'The "name" in your pair appears to be a numeric value (' + arr[0] + "), only alphanumeric characters are allowed in the name property"}
            }
        } else {
            throw{name: "", message: "Should be an instance of Object"}
        }
    }, removeKeyValue: function (arr) {
        $.each(arr, function (index, deleteId) {
            $.each(_data, function (idx) {
                if (_data[idx].id === deleteId) {
                    _data.splice(idx, 1);
                    return false
                }
                return true
            })
        });
        this.render(null)
    }, isValidInput  : function (input) {
        var count = 0;
        if (typeof input === "string" && input.length > 2) {
            this.utils.forEach(input, function (member) {
                if (member === "=") {
                    count++
                }
            })
        } else {
            throw{name: "Hmm... your input does not look right", message: 'Your string should be in the proper format of "name" = "value". Without the quotes.'}
        }
        return count === 1 && input.indexOf("=") > 0 && input.indexOf("=") < input.length - 1
    }, sortKeyValueBy: function (prop) {
        _data.sort(this.utils.createComparator(prop));
        this.render(null)
    }, render        : function (elm) {
        var el = elm || _output;
        el.children().remove();
        (function appendData(obj, el) {
            var markup = [];
            $.each(obj, function (index, value) {
                markup.push("<option value =" + value["id"] + ">" + value["name"] + "=" + value["value"] + "</option>")
            });
            el.append($(markup.join("")))
        })(_data, el);
        console.log(JSON.stringify(_data))
    }, buildXML      : function (d) {
        var data = d || _data;
        var markup = [];
        if (!this.utils.isArray(data)) {
            throw{name: "Data Error", message: "It seems you do not have the right kind of data: " + data}
        }
        markup.push("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>[br]");
        markup.push("<root>[br]");
        $.each(data, function (index, value) {
            markup.push(" <dataitem>[br]");
            for (var prop in value) {
                if (value.hasOwnProperty(prop)) {
                    markup.push("  <" + prop + ">" + value[prop] + "</" + prop + ">[br]")
                }
            }
            markup.push(" </dataitem>[br]")
        });
        markup.push("</root>[br]");
        return markup
    }, renderXML     : function (XML, el) {
        el.empty();
        if (this.utils.isArray(XML) && XML.length > 3) {
            XML = XML.join("");
            XML = XML.replace(/[<>&"]/g, function (c) {
                var character = {"<": "&lt;", ">": "&gt;", '"': "&quot;", "&": "&amp;"};
                return character[c]
            });
            XML = XML.replace(/\[br\]/g, "<br />");
            var XMLStr = "<pre>" + XML + "</pre>";
            console.log(XMLStr);
            $(XMLStr).appendTo(el);
            return true
        }
        return false
    }, utils         : {forEach: function (arr, action) {
        if (typeof arr === "string" || this.isArray(arr)) {
            for (var i = 0, len = arr.length; i < len; i++) {
                action(arr[i])
            }
        }
    }, isArray                 : function (val) {
        return Object.prototype.toString.call(val) === "[object Array]"
    }, isNumeric               : function (val) {
        return!isNaN(parseFloat(val)) && isFinite(val)
    }, createComparator        : function (prop) {
        return function (objA, objB) {
            var store1 = objA[prop];
            var store2 = objB[prop];
            if (store1 === store2) {
                return 0
            }
            if (typeof store1 === typeof store2) {
                if (typeof store1 === "string") {
                    return store1.localeCompare(store2)
                }
                return store1 < store2 ? -1 : 1
            }
            return typeof store1 < typeof store2 ? -1 : 1
        }
    }, handleError             : function (e, out) {
        out.show();
        out.html("<span>" + e.name + "<br />" + e.message + "</span>");
        setTimeout(function () {
            out.children().fadeOut();
            out.slideUp("slow")
        }, 1e4)
    }}, start        : function () {
        var addKVButton = $("input#kvAdd");
        var deleteKVButton = $("input#kvDelete");
        var sortKVButton = $("input.kvSort");
        var showXML = $("#kvShowXML");
        var kvInput = $("#kvInput");
        var notifications = $(".kv-error-notification");
        var xmlOutput = $("#kvXML");
        kvInput.bind({keypress: function (e) {
            e.keyCode === 13 && addKVButton.click()
        }});
        if (addKVButton.length === 1) {
            addKVButton.click(function (e) {
                e.preventDefault();
                try {
                    ferrandApp.addKeyValue(ferrandApp.getInput())
                } catch (e) {
                    ferrandApp.utils.handleError(e, notifications)
                }
                ferrandApp.setInput("")
            })
        }
        if (deleteKVButton.length === 1) {
            deleteKVButton.click(function (e) {
                e.preventDefault();
                var selected = ferrandApp.getSelected();
                if (selected.length > 0) {
                    ferrandApp.removeKeyValue(selected)
                }
            })
        }
        if (sortKVButton.length > 0) {
            sortKVButton.click(function (e) {
                e.preventDefault();
                switch (true) {
                    case this.value.toLocaleLowerCase() === "sort by name":
                        ferrandApp.sortKeyValueBy("name");
                        break;
                    case this.value.toLocaleLowerCase() === "sort by value":
                        ferrandApp.sortKeyValueBy("value");
                        break;
                    default:
                        ferrandApp.sortKeyValueBy("id");
                        break
                }
            })
        }
        if (showXML.length > 0) {
            showXML.click(function (e) {
                e.preventDefault();
                $(this).val(ferrandApp.renderXML(ferrandApp.buildXML(), xmlOutput) ? "Reload XML" : "Show XML")
            })
        }
    }}
}();
$(ferrandApp.start);